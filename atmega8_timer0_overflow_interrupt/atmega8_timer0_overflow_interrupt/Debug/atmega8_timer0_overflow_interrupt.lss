
atmega8_timer0_overflow_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000136  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000553  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d4  00000000  00000000  0000071f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f7  00000000  00000000  00000bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000306  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000113a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001183  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	2c d0       	rcall	.+88     	; 0x9c <main>
  44:	3c c0       	rjmp	.+120    	; 0xbe <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_9>:
/*
 * Interrupt Service Routine(ISR) is executed with period (F_CPU/(256*prescaler)).
 * In this case, ISR is executed 30.517... times per second.
 */
ISR(TIMER0_OVF_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
	counter++;
  56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
  5a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counter+0x1>
  5e:	01 96       	adiw	r24, 0x01	; 1
  60:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counter+0x1>
  64:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter>

	if(counter >= _ONE_SEC_CNT) {
  68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter>
  6c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counter+0x1>
  70:	4f 97       	sbiw	r24, 0x1f	; 31
  72:	6c f0       	brlt	.+26     	; 0x8e <__vector_9+0x46>
		counter = 0;
  74:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter+0x1>
  78:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter>
		seconds++;
  7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  80:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
}
  8e:	9f 91       	pop	r25
  90:	8f 91       	pop	r24
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <main>:

int main(void)
{
	DDRB = 0x01;		// To blink LED, set PB0 as output
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	87 bb       	out	0x17, r24	; 23
	TIMSK = 0x01;		// Set TOIE0(Timer Overflow Interrupt Enable0) bit
  a0:	89 bf       	out	0x39, r24	; 57
	TCCR0 = 0x05;		// Set prescaler as 1024.
  a2:	85 e0       	ldi	r24, 0x05	; 5
  a4:	83 bf       	out	0x33, r24	; 51

	sei();				// Activate enabled interrupts setting I flag in SREG register
  a6:	78 94       	sei

	while (1) {
		if(seconds%2)
			PORTB = 0x01;
  a8:	21 e0       	ldi	r18, 0x01	; 1
	TCCR0 = 0x05;		// Set prescaler as 1024.

	sei();				// Activate enabled interrupts setting I flag in SREG register

	while (1) {
		if(seconds%2)
  aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ae:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  b2:	80 ff       	sbrs	r24, 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x1e>
			PORTB = 0x01;
  b6:	28 bb       	out	0x18, r18	; 24
  b8:	f8 cf       	rjmp	.-16     	; 0xaa <main+0xe>
		else
			PORTB = 0x00;
  ba:	18 ba       	out	0x18, r1	; 24
  bc:	f6 cf       	rjmp	.-20     	; 0xaa <main+0xe>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
