
usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e6  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000541  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000269  00000000  00000000  00000d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f1  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000201  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	51 d0       	rcall	.+162    	; 0xd6 <main>
  34:	57 c0       	rjmp	.+174    	; 0xe4 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <usart_init>:
#include <util/delay.h>

void usart_init(int baud)
{
	int ubrr = 0;
	switch(baud) {
  38:	80 3c       	cpi	r24, 0xC0	; 192
  3a:	22 e1       	ldi	r18, 0x12	; 18
  3c:	92 07       	cpc	r25, r18
  3e:	49 f1       	breq	.+82     	; 0x92 <__SREG__+0x53>
  40:	8c f4       	brge	.+34     	; 0x64 <__SREG__+0x25>
  42:	81 15       	cp	r24, r1
  44:	22 ec       	ldi	r18, 0xC2	; 194
  46:	92 07       	cpc	r25, r18
  48:	a1 f1       	breq	.+104    	; 0xb2 <__SREG__+0x73>
  4a:	24 f4       	brge	.+8      	; 0x54 <__SREG__+0x15>
  4c:	81 15       	cp	r24, r1
  4e:	96 49       	sbci	r25, 0x96	; 150
  50:	51 f1       	breq	.+84     	; 0xa6 <__SREG__+0x67>
  52:	31 c0       	rjmp	.+98     	; 0xb6 <__SREG__+0x77>
  54:	81 15       	cp	r24, r1
  56:	21 ee       	ldi	r18, 0xE1	; 225
  58:	92 07       	cpc	r25, r18
  5a:	39 f1       	breq	.+78     	; 0xaa <__SREG__+0x6b>
  5c:	80 36       	cpi	r24, 0x60	; 96
  5e:	99 40       	sbci	r25, 0x09	; 9
  60:	b1 f0       	breq	.+44     	; 0x8e <__SREG__+0x4f>
  62:	29 c0       	rjmp	.+82     	; 0xb6 <__SREG__+0x77>
  64:	80 34       	cpi	r24, 0x40	; 64
  66:	28 e3       	ldi	r18, 0x38	; 56
  68:	92 07       	cpc	r25, r18
  6a:	b9 f0       	breq	.+46     	; 0x9a <__SREG__+0x5b>
  6c:	44 f4       	brge	.+16     	; 0x7e <__SREG__+0x3f>
  6e:	80 38       	cpi	r24, 0x80	; 128
  70:	25 e2       	ldi	r18, 0x25	; 37
  72:	92 07       	cpc	r25, r18
  74:	81 f0       	breq	.+32     	; 0x96 <__SREG__+0x57>
  76:	81 15       	cp	r24, r1
  78:	9c 42       	sbci	r25, 0x2C	; 44
  7a:	c9 f0       	breq	.+50     	; 0xae <__SREG__+0x6f>
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__SREG__+0x77>
  7e:	81 15       	cp	r24, r1
  80:	2b e4       	ldi	r18, 0x4B	; 75
  82:	92 07       	cpc	r25, r18
  84:	61 f0       	breq	.+24     	; 0x9e <__SREG__+0x5f>
  86:	80 38       	cpi	r24, 0x80	; 128
  88:	90 47       	sbci	r25, 0x70	; 112
  8a:	59 f0       	breq	.+22     	; 0xa2 <__SREG__+0x63>
  8c:	14 c0       	rjmp	.+40     	; 0xb6 <__SREG__+0x77>
		case 2400: ubrr = 207; break;
  8e:	8f ec       	ldi	r24, 0xCF	; 207
  90:	13 c0       	rjmp	.+38     	; 0xb8 <__SREG__+0x79>
		case 4800: ubrr = 103; break;
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	11 c0       	rjmp	.+34     	; 0xb8 <__SREG__+0x79>
		case 9600: ubrr = 51; break;
  96:	83 e3       	ldi	r24, 0x33	; 51
  98:	0f c0       	rjmp	.+30     	; 0xb8 <__SREG__+0x79>
		case 14400: ubrr = 34; break;
  9a:	82 e2       	ldi	r24, 0x22	; 34
  9c:	0d c0       	rjmp	.+26     	; 0xb8 <__SREG__+0x79>
		case 19200: ubrr = 25; break;
  9e:	89 e1       	ldi	r24, 0x19	; 25
  a0:	0b c0       	rjmp	.+22     	; 0xb8 <__SREG__+0x79>
		case 28800: ubrr = 16; break;
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	09 c0       	rjmp	.+18     	; 0xb8 <__SREG__+0x79>
		case 38400: ubrr = 12; break;
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	07 c0       	rjmp	.+14     	; 0xb8 <__SREG__+0x79>
		case 57600: ubrr = 8; break;
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	05 c0       	rjmp	.+10     	; 0xb8 <__SREG__+0x79>
		case 76800: ubrr = 6; break;
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <__SREG__+0x79>
		case 115200: ubrr = 3; break; //It is not recommended to use baud rate faster than 115200 on ATmega8
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <__SREG__+0x79>
#include <avr/io.h>
#include <util/delay.h>

void usart_init(int baud)
{
	int ubrr = 0;
  b6:	80 e0       	ldi	r24, 0x00	; 0
		case 38400: ubrr = 12; break;
		case 57600: ubrr = 8; break;
		case 76800: ubrr = 6; break;
		case 115200: ubrr = 3; break; //It is not recommended to use baud rate faster than 115200 on ATmega8
	}
	UBRRH = (unsigned char)(ubrr >> 8);
  b8:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)ubrr;
  ba:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN) | (1<<TXEN);
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL) | (0<<USBS) | (3<<UCSZ0);
  c0:	86 e8       	ldi	r24, 0x86	; 134
  c2:	80 bd       	out	0x20, r24	; 32
  c4:	08 95       	ret

000000c6 <usart_transmit>:
}

void usart_transmit(unsigned char data)
{
	while(!(UCSRA&0b00100000));
  c6:	5d 9b       	sbis	0x0b, 5	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <usart_transmit>
	UDR=data;
  ca:	8c b9       	out	0x0c, r24	; 12
  cc:	08 95       	ret

000000ce <usart_receive>:
}

unsigned char usart_receive()
{
	unsigned char inByte;
	while(!(UCSRA&0b10000000));
  ce:	5f 9b       	sbis	0x0b, 7	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <usart_receive>
	inByte=UDR;
  d2:	8c b1       	in	r24, 0x0c	; 12
	return inByte;
}
  d4:	08 95       	ret

000000d6 <main>:

int main(void)
{
	usart_init(9600);
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	95 e2       	ldi	r25, 0x25	; 37
  da:	ae df       	rcall	.-164    	; 0x38 <usart_init>
    while (1) {
		unsigned char inByte = usart_receive();
  dc:	f8 df       	rcall	.-16     	; 0xce <usart_receive>
		usart_transmit(inByte+('A'-'a'));
  de:	80 52       	subi	r24, 0x20	; 32
  e0:	f2 df       	rcall	.-28     	; 0xc6 <usart_transmit>
  e2:	fc cf       	rjmp	.-8      	; 0xdc <main+0x6>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
